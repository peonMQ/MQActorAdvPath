// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActorFollowee.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ActorFollowee_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ActorFollowee_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ActorFollowee_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ActorFollowee_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ActorFollowee_2eproto;
namespace mq {
namespace proto {
namespace actorfollowee {
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace actorfollowee
}  // namespace proto
}  // namespace mq
PROTOBUF_NAMESPACE_OPEN
template<> ::mq::proto::actorfollowee::Message* Arena::CreateMaybeMessage<::mq::proto::actorfollowee::Message>(Arena*);
template<> ::mq::proto::actorfollowee::Position* Arena::CreateMaybeMessage<::mq::proto::actorfollowee::Position>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mq {
namespace proto {
namespace actorfollowee {

enum MessageId : int {
  Subscribe = 0,
  UnSubscribe = 1,
  PositionUpdate = 2,
  MessageId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageId_IsValid(int value);
constexpr MessageId MessageId_MIN = Subscribe;
constexpr MessageId MessageId_MAX = PositionUpdate;
constexpr int MessageId_ARRAYSIZE = MessageId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageId_descriptor();
template<typename T>
inline const std::string& MessageId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageId_descriptor(), enum_t_value);
}
inline bool MessageId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageId>(
    MessageId_descriptor(), name, value);
}
// ===================================================================

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mq.proto.actorfollowee.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mq.proto.actorfollowee.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSpawnidFieldNumber = 1,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kZFieldNumber = 5,
    kHeadingFieldNumber = 6,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 spawnid = 1;
  void clear_spawnid();
  uint32_t spawnid() const;
  void set_spawnid(uint32_t value);
  private:
  uint32_t _internal_spawnid() const;
  void _internal_set_spawnid(uint32_t value);
  public:

  // float x = 3;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 4;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 5;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float heading = 6;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // @@protoc_insertion_point(class_scope:mq.proto.actorfollowee.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t spawnid_;
    float x_;
    float y_;
    float z_;
    float heading_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ActorFollowee_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mq.proto.actorfollowee.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mq.proto.actorfollowee.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .mq.proto.actorfollowee.Position position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::mq::proto::actorfollowee::Position& position() const;
  PROTOBUF_NODISCARD ::mq::proto::actorfollowee::Position* release_position();
  ::mq::proto::actorfollowee::Position* mutable_position();
  void set_allocated_position(::mq::proto::actorfollowee::Position* position);
  private:
  const ::mq::proto::actorfollowee::Position& _internal_position() const;
  ::mq::proto::actorfollowee::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::mq::proto::actorfollowee::Position* position);
  ::mq::proto::actorfollowee::Position* unsafe_arena_release_position();

  // .mq.proto.actorfollowee.MessageId id = 1;
  void clear_id();
  ::mq::proto::actorfollowee::MessageId id() const;
  void set_id(::mq::proto::actorfollowee::MessageId value);
  private:
  ::mq::proto::actorfollowee::MessageId _internal_id() const;
  void _internal_set_id(::mq::proto::actorfollowee::MessageId value);
  public:

  // @@protoc_insertion_point(class_scope:mq.proto.actorfollowee.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::mq::proto::actorfollowee::Position* position_;
    int id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ActorFollowee_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// uint32 spawnid = 1;
inline void Position::clear_spawnid() {
  _impl_.spawnid_ = 0u;
}
inline uint32_t Position::_internal_spawnid() const {
  return _impl_.spawnid_;
}
inline uint32_t Position::spawnid() const {
  // @@protoc_insertion_point(field_get:mq.proto.actorfollowee.Position.spawnid)
  return _internal_spawnid();
}
inline void Position::_internal_set_spawnid(uint32_t value) {
  
  _impl_.spawnid_ = value;
}
inline void Position::set_spawnid(uint32_t value) {
  _internal_set_spawnid(value);
  // @@protoc_insertion_point(field_set:mq.proto.actorfollowee.Position.spawnid)
}

// string name = 2;
inline void Position::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Position::name() const {
  // @@protoc_insertion_point(field_get:mq.proto.actorfollowee.Position.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Position::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mq.proto.actorfollowee.Position.name)
}
inline std::string* Position::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mq.proto.actorfollowee.Position.name)
  return _s;
}
inline const std::string& Position::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Position::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Position::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Position::release_name() {
  // @@protoc_insertion_point(field_release:mq.proto.actorfollowee.Position.name)
  return _impl_.name_.Release();
}
inline void Position::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mq.proto.actorfollowee.Position.name)
}

// float x = 3;
inline void Position::clear_x() {
  _impl_.x_ = 0;
}
inline float Position::_internal_x() const {
  return _impl_.x_;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:mq.proto.actorfollowee.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mq.proto.actorfollowee.Position.x)
}

// float y = 4;
inline void Position::clear_y() {
  _impl_.y_ = 0;
}
inline float Position::_internal_y() const {
  return _impl_.y_;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:mq.proto.actorfollowee.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mq.proto.actorfollowee.Position.y)
}

// float z = 5;
inline void Position::clear_z() {
  _impl_.z_ = 0;
}
inline float Position::_internal_z() const {
  return _impl_.z_;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:mq.proto.actorfollowee.Position.z)
  return _internal_z();
}
inline void Position::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mq.proto.actorfollowee.Position.z)
}

// float heading = 6;
inline void Position::clear_heading() {
  _impl_.heading_ = 0;
}
inline float Position::_internal_heading() const {
  return _impl_.heading_;
}
inline float Position::heading() const {
  // @@protoc_insertion_point(field_get:mq.proto.actorfollowee.Position.heading)
  return _internal_heading();
}
inline void Position::_internal_set_heading(float value) {
  
  _impl_.heading_ = value;
}
inline void Position::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:mq.proto.actorfollowee.Position.heading)
}

// -------------------------------------------------------------------

// Message

// .mq.proto.actorfollowee.MessageId id = 1;
inline void Message::clear_id() {
  _impl_.id_ = 0;
}
inline ::mq::proto::actorfollowee::MessageId Message::_internal_id() const {
  return static_cast< ::mq::proto::actorfollowee::MessageId >(_impl_.id_);
}
inline ::mq::proto::actorfollowee::MessageId Message::id() const {
  // @@protoc_insertion_point(field_get:mq.proto.actorfollowee.Message.id)
  return _internal_id();
}
inline void Message::_internal_set_id(::mq::proto::actorfollowee::MessageId value) {
  
  _impl_.id_ = value;
}
inline void Message::set_id(::mq::proto::actorfollowee::MessageId value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mq.proto.actorfollowee.Message.id)
}

// optional .mq.proto.actorfollowee.Position position = 2;
inline bool Message::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool Message::has_position() const {
  return _internal_has_position();
}
inline void Message::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mq::proto::actorfollowee::Position& Message::_internal_position() const {
  const ::mq::proto::actorfollowee::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::mq::proto::actorfollowee::Position&>(
      ::mq::proto::actorfollowee::_Position_default_instance_);
}
inline const ::mq::proto::actorfollowee::Position& Message::position() const {
  // @@protoc_insertion_point(field_get:mq.proto.actorfollowee.Message.position)
  return _internal_position();
}
inline void Message::unsafe_arena_set_allocated_position(
    ::mq::proto::actorfollowee::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mq.proto.actorfollowee.Message.position)
}
inline ::mq::proto::actorfollowee::Position* Message::release_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mq::proto::actorfollowee::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mq::proto::actorfollowee::Position* Message::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:mq.proto.actorfollowee.Message.position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mq::proto::actorfollowee::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::mq::proto::actorfollowee::Position* Message::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mq::proto::actorfollowee::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::mq::proto::actorfollowee::Position* Message::mutable_position() {
  ::mq::proto::actorfollowee::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:mq.proto.actorfollowee.Message.position)
  return _msg;
}
inline void Message::set_allocated_position(::mq::proto::actorfollowee::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mq.proto.actorfollowee.Message.position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace actorfollowee
}  // namespace proto
}  // namespace mq

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mq::proto::actorfollowee::MessageId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mq::proto::actorfollowee::MessageId>() {
  return ::mq::proto::actorfollowee::MessageId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ActorFollowee_2eproto
